/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GFLDialog.java
 *
 * Created on 09.01.2012, 12:15:10
 */
package de.janquadflieg.mrracer.gui;

import java.awt.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import javax.swing.JFileChooser;

import java.util.Properties;

import de.janquadflieg.mrracer.Utils;
import de.janquadflieg.mrracer.controller.MrRacer2012;
import de.janquadflieg.mrracer.functions.GeneralisedLogisticFunction;
import de.janquadflieg.mrracer.functions.GeneralisedLogisticFunction.XAxis;
import de.janquadflieg.mrracer.functions.GeneralisedLogisticFunction.YAxis;
import de.janquadflieg.mrracer.plan.Plan2011;

/**
 *
 * @author quad
 */
public class GLFDialog extends javax.swing.JDialog {

    private static final double GRANULARITY = 10000.0;
    private boolean normalize = true;
    private Properties p;
    private final double b = 10.0, m = 0.0, v = 1.0, q = 0.01, bcc = 0.0;
    private GLFPainter painter = new GLFPainter();
    private String prefix = "";

    public GLFDialog(java.awt.Frame parent, boolean modal, Properties p) {
        this(parent, modal, p, "-MrRacer2012.Plan--PLAN.targetSpeeds-");
    }

    /** Creates new form GFLDialog */
    public GLFDialog(java.awt.Frame parent, boolean modal, Properties p, String prefix) {
        super(parent, modal);

        this.p = p;
        this.prefix = prefix;

        initComponents();
        initCustomComponents();

        p.setProperty(prefix + GeneralisedLogisticFunction.F, String.valueOf(1.0));
        painter.f.setParameters(p, prefix);
        if (normalize) {
            double f0 = 1.0 / painter.f.getValue(0.0);
            p.setProperty(prefix + GeneralisedLogisticFunction.F, String.valueOf(f0));
            painter.f.setParameters(p, prefix);
        }

        double d = Double.parseDouble(p.getProperty(prefix + GeneralisedLogisticFunction.GROWTH_RATE_B));
        jslB.setValue((int) Math.round(((d - 1.0) / 9.0) * GRANULARITY));
        jtfB.setText(Utils.dTS(d));

        d = Double.parseDouble(p.getProperty(prefix + GeneralisedLogisticFunction.M));
        jslM.setValue((int) Math.round(d * GRANULARITY));
        jtfM.setText(Utils.dTS(d));

        d = Double.parseDouble(p.getProperty(prefix + GeneralisedLogisticFunction.V));
        jslV.setValue((int) Math.round(d * GRANULARITY));
        jtfV.setText(Utils.dTS(d));

        d = Double.parseDouble(p.getProperty(prefix + GeneralisedLogisticFunction.Q));
        jslQ.setValue((int) Math.round(d * GRANULARITY));
        jtfQ.setText(Utils.dTS(d));

        d = Double.parseDouble(p.getProperty(MrRacer2012.PLAN + Plan2011.BRAKE_CORNER_COEFF));
        jslBCC.setValue((int) Math.round(d * GRANULARITY));

        setSize(800, 600);
        doLayout();
        pack();
    }

    protected Properties getProperties() {
        return p;
    }

    private void initCustomComponents() {
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 0;
        c.gridy = 0;
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1.0;
        c.weighty = 1.0;

        jpGraph.add(painter, c);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jslB = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jslM = new javax.swing.JSlider();
        jslV = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jtfB = new javax.swing.JTextField();
        jslQ = new javax.swing.JSlider();
        jtfM = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jtfV = new javax.swing.JTextField();
        jtfQ = new javax.swing.JTextField();
        jTextArea1 = new javax.swing.JTextArea();
        jpGraph = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jslBCC = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        jtfBCC = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Parameter");
        setName("Parameters"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("B:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jLabel1, gridBagConstraints);

        jslB.setMaximum(10000);
        jslB.setDoubleBuffered(true);
        jslB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jslBStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        getContentPane().add(jslB, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("M:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("V:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        getContentPane().add(jLabel3, gridBagConstraints);

        jslM.setMaximum(10000);
        jslM.setDoubleBuffered(true);
        jslM.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jslMStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        getContentPane().add(jslM, gridBagConstraints);

        jslV.setMaximum(10000);
        jslV.setMinimum(10);
        jslV.setDoubleBuffered(true);
        jslV.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jslVStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        getContentPane().add(jslV, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("Q:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        getContentPane().add(jLabel4, gridBagConstraints);

        jtfB.setColumns(5);
        jtfB.setEditable(false);
        jtfB.setText("value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(jtfB, gridBagConstraints);

        jslQ.setMaximum(10000);
        jslQ.setMinimum(10);
        jslQ.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jslQStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        getContentPane().add(jslQ, gridBagConstraints);

        jtfM.setColumns(5);
        jtfM.setEditable(false);
        jtfM.setText("value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(jtfM, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jtfV.setColumns(5);
        jtfV.setEditable(false);
        jtfV.setText("value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(jtfV, gridBagConstraints);

        jtfQ.setColumns(5);
        jtfQ.setEditable(false);
        jtfQ.setText("value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(jtfQ, gridBagConstraints);

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Wie schnell soll das Auto eine Kurve durchfahren? Das kann man hier einstellen.\n");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(jTextArea1, gridBagConstraints);

        jpGraph.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jpGraph, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButton2.setText("Ok");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok(evt);
            }
        });
        jPanel1.add(jButton2, new java.awt.GridBagConstraints());

        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset(evt);
            }
        });
        jPanel1.add(jButton1, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel7.setText("In der Kurve bremsen?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(jLabel7, gridBagConstraints);

        jLabel8.setText("Nein");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel3.add(jLabel8, gridBagConstraints);

        jslBCC.setMaximum(10000);
        jslBCC.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jslBCCStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jslBCC, gridBagConstraints);

        jLabel9.setText("Ja");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jLabel9, gridBagConstraints);

        jtfBCC.setColumns(5);
        jtfBCC.setEditable(false);
        jtfBCC.setText("value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel3.add(jtfBCC, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jPanel3, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jslBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jslBStateChanged
        double d = 1.0 + (((jslB.getValue() * 1.0) / GRANULARITY) * 9.0);
        p.setProperty(prefix + GeneralisedLogisticFunction.GROWTH_RATE_B, String.valueOf(d));
        p.setProperty(prefix + GeneralisedLogisticFunction.F, String.valueOf(1.0));
        painter.f.setParameters(p, prefix);
        if (normalize) {
            double f0 = 1.0 / painter.f.getMirroredValue(0.0);
            p.setProperty(prefix + GeneralisedLogisticFunction.F, String.valueOf(f0));
            painter.f.setParameters(p, prefix);
        }
        jtfB.setText(Utils.dTS(d));
        painter.repaint();
    }//GEN-LAST:event_jslBStateChanged

    private void jslMStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jslMStateChanged
        double d = jslM.getValue() / GRANULARITY;
        p.setProperty(prefix + GeneralisedLogisticFunction.M, String.valueOf(d));
        p.setProperty(prefix + GeneralisedLogisticFunction.F, String.valueOf(1.0));
        painter.f.setParameters(p, prefix);
        if (normalize) {
            double f0 = 1.0 / painter.f.getMirroredValue(0.0);
            p.setProperty(prefix + GeneralisedLogisticFunction.F, String.valueOf(f0));
            painter.f.setParameters(p, prefix);
        }
        jtfM.setText(Utils.dTS(d));
        painter.repaint();
    }//GEN-LAST:event_jslMStateChanged

    private void jslVStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jslVStateChanged
        double d = jslV.getValue() / GRANULARITY;
        p.setProperty(prefix + GeneralisedLogisticFunction.V, String.valueOf(d));
        p.setProperty(prefix + GeneralisedLogisticFunction.F, String.valueOf(1.0));
        painter.f.setParameters(p, prefix);
        if (normalize) {
            double f0 = 1.0 / painter.f.getMirroredValue(0.0);
            p.setProperty(prefix + GeneralisedLogisticFunction.F, String.valueOf(f0));
            painter.f.setParameters(p, prefix);
        }
        painter.f.getParameters(p, prefix);
        d = Double.parseDouble(p.getProperty(prefix + GeneralisedLogisticFunction.V));
        //System.out.println(d);
        jtfV.setText(Utils.dTS(d));
        painter.repaint();
    }//GEN-LAST:event_jslVStateChanged

    private void jslQStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jslQStateChanged
        double d = jslQ.getValue() / GRANULARITY;
        p.setProperty(prefix + GeneralisedLogisticFunction.Q, String.valueOf(d));
        p.setProperty(prefix + GeneralisedLogisticFunction.F, String.valueOf(1.0));
        painter.f.setParameters(p, prefix);
        if (normalize) {
            double f0 = 1.0 / painter.f.getMirroredValue(0.0);
            p.setProperty(prefix + GeneralisedLogisticFunction.F, String.valueOf(f0));
            painter.f.setParameters(p, prefix);
        }
        painter.f.getParameters(p, prefix);
        d = Double.parseDouble(p.getProperty(prefix + GeneralisedLogisticFunction.Q));
        //System.out.println(d);
        jtfQ.setText(Utils.dTS(d));
        painter.repaint();
    }//GEN-LAST:event_jslQStateChanged

    private void ok(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok
        setVisible(false);
    }//GEN-LAST:event_ok

    private void reset(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset
        p.setProperty(prefix + GeneralisedLogisticFunction.GROWTH_RATE_B, String.valueOf(b));
        jtfB.setText(Utils.dTS(b));
        jslB.setValue((int) Math.round(((b - 1.0) / 9.0) * GRANULARITY));

        p.setProperty(prefix + GeneralisedLogisticFunction.M, String.valueOf(m));
        jtfM.setText(Utils.dTS(m));
        jslM.setValue((int) Math.round(m * GRANULARITY));

        p.setProperty(prefix + GeneralisedLogisticFunction.V, String.valueOf(v));
        jtfV.setText(Utils.dTS(v));
        jslV.setValue((int) Math.round(v * GRANULARITY));

        p.setProperty(prefix + GeneralisedLogisticFunction.Q, String.valueOf(q));
        jtfQ.setText(Utils.dTS(q));
        jslQ.setValue((int) Math.round(q * GRANULARITY));
        painter.f.setParameters(p, MrRacer2012.PLAN + Plan2011.TARGET_SPEEDS);
        painter.repaint();

        p.setProperty(MrRacer2012.PLAN + Plan2011.BRAKE_CORNER_COEFF, String.valueOf(bcc));
        jslBCC.setValue((int) Math.round(bcc * GRANULARITY));
    }//GEN-LAST:event_reset

    private void jslBCCStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jslBCCStateChanged
        double d = jslBCC.getValue() / GRANULARITY;
        p.setProperty(MrRacer2012.PLAN + Plan2011.BRAKE_CORNER_COEFF, String.valueOf(d));
        jtfBCC.setText(Utils.dTS(d));
    }//GEN-LAST:event_jslBCCStateChanged

    private static class GLFPainter extends javax.swing.JPanel {

        GeneralisedLogisticFunction f;

        public GLFPainter() {
            super();
            f = new GeneralisedLogisticFunction();

            setPreferredSize(new Dimension(800, 400));
        }

        @Override
        public void paintComponent(Graphics graphics) {
            Graphics2D g = (Graphics2D) graphics;

            XAxis x = new XAxis();
            YAxis y = new YAxis();

            x.labelMin = 0.0;
            x.labelMax = 100.0;
            x.ticks = 25.0;
            x.xmin = 0.0;
            x.xmax = 100.0;
            x.unit = "°";
            x.labels = new String[]{"Gerade", "Schnell", "Mittel", "Langsam", "Haarnadel"};

            y.mirror = true;
            y.labelMin = 0.0;
            y.y0 = 50.0;
            y.labelMax = 330.0;
            y.y1 = 330.0;
            y.ticks = 50.0;
            y.unit = "km/h";

            f.paint(g, getSize(), x, y);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                Properties p = new Properties();

                p.setProperty(GeneralisedLogisticFunction.M, String.valueOf(0.5));
                p.setProperty(GeneralisedLogisticFunction.LOWER_ASYMPTOTE_A, String.valueOf(0.0));
                p.setProperty(GeneralisedLogisticFunction.UPPER_ASYMPTOTE_K, String.valueOf(2.0));
                p.setProperty(GeneralisedLogisticFunction.GROWTH_RATE_B, String.valueOf(1.5));
                p.setProperty(GeneralisedLogisticFunction.V, String.valueOf(0.5));
                p.setProperty(GeneralisedLogisticFunction.Q, String.valueOf(0.5));
                p.setProperty(MrRacer2012.PLAN + Plan2011.BRAKE_CORNER_COEFF, String.valueOf(0.4));

                /*try {
                JFileChooser fileChooser = new JFileChooser("f:\\");
                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                fileChooser.setAcceptAllFileFilterUsed(true);
                fileChooser.setMultiSelectionEnabled(false);


                int result = fileChooser.showOpenDialog(null);
                if (result != JFileChooser.APPROVE_OPTION) {
                System.exit(-1);
                }

                File file = fileChooser.getSelectedFile();

                InputStream in = new FileInputStream(file);

                p.load(in);
                in.close();

                } catch (Exception e) {
                e.printStackTrace(System.out);
                }*/

                GLFDialog dialog = new GLFDialog(null, false, p, "");
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel jpGraph;
    private javax.swing.JSlider jslB;
    private javax.swing.JSlider jslBCC;
    private javax.swing.JSlider jslM;
    private javax.swing.JSlider jslQ;
    private javax.swing.JSlider jslV;
    private javax.swing.JTextField jtfB;
    private javax.swing.JTextField jtfBCC;
    private javax.swing.JTextField jtfM;
    private javax.swing.JTextField jtfQ;
    private javax.swing.JTextField jtfV;
    // End of variables declaration//GEN-END:variables
}
